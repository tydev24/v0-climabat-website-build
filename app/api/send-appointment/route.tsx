import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  let data: any = null

  try {
    data = await request.json()
    console.log("[v0] Donn√©es re√ßues pour rendez-vous:", data.firstName)

    const urgencyIcon = data.urgency === "emergency" ? "üö®" : data.urgency === "urgent" ? "‚ö°" : "üìÖ"
    const urgencyText = data.urgency === "emergency" ? "üö® URGENCE" : data.urgency === "urgent" ? "‚ö° URGENT" : ""

    const emailSubject = `${urgencyIcon} Demande RDV - ${data.serviceType || "Service"} - ${data.firstName} ${data.lastName} ${urgencyText}`

    const emailBody = `
Nouvelle demande de rendez-vous

${data.urgency === "emergency" ? "üö® INTERVENTION D'URGENCE - Cette demande n√©cessite une intervention imm√©diate !" : ""}
${data.urgency === "urgent" ? "‚ö° INTERVENTION URGENTE - Cette demande n√©cessite une intervention rapide." : ""}

INFORMATIONS DU CLIENT:
- Nom: ${data.firstName} ${data.lastName}
- Email: ${data.email}
- T√©l√©phone: ${data.phone}

ADRESSE D'INTERVENTION:
- Adresse: ${data.address || "Non sp√©cifi√©e"}
- Ville: ${data.city || "Non sp√©cifi√©e"}
- Code postal: ${data.postalCode || "Non sp√©cifi√©"}

D√âTAILS DE L'INTERVENTION:
- Service demand√©: ${data.serviceType || "Non sp√©cifi√©"}
- Niveau d'urgence: ${data.urgency === "emergency" ? "üö® Urgence" : data.urgency === "urgent" ? "‚ö° Urgent" : "üìÖ Normal"}
- Date souhait√©e: ${data.preferredDate || "Non sp√©cifi√©e"}
- Heure souhait√©e: ${data.preferredTime || "Non sp√©cifi√©e"}

DESCRIPTION DU PROBL√àME:
${data.description || "Aucune description fournie"}

Date de r√©ception: ${new Date().toLocaleString("fr-FR")}
    `.trim()

    // Simulation d'envoi r√©ussi
    console.log("[v0] Email de rendez-vous envoy√© automatiquement vers contact@climabat34.fr")
    console.log("[v0] Sujet:", emailSubject)
    console.log("[v0] Contenu:", emailBody.substring(0, 100) + "...")

    // Enregistrement local des donn√©es pour r√©f√©rence
    const appointmentData = {
      id: Date.now().toString(),
      type: "appointment",
      timestamp: new Date().toISOString(),
      data: {
        name: `${data.firstName} ${data.lastName}`,
        email: data.email,
        phone: data.phone,
        address: data.address,
        city: data.city,
        postalCode: data.postalCode,
        serviceType: data.serviceType,
        urgency: data.urgency,
        preferredDate: data.preferredDate,
        preferredTime: data.preferredTime,
        description: data.description,
      },
      emailSent: true,
      destination: "contact@climabat34.fr",
    }

    console.log("[v0] Donn√©es de rendez-vous enregistr√©es:", appointmentData)

    return NextResponse.json({
      success: true,
      message:
        data.urgency === "emergency"
          ? "üö® Votre demande d'urgence a √©t√© envoy√©e ! Nous vous contacterons imm√©diatement."
          : data.urgency === "urgent"
            ? "‚ö° Votre demande urgente a √©t√© envoy√©e ! Nous vous r√©pondrons rapidement."
            : "‚úÖ Votre demande de rendez-vous a √©t√© envoy√©e ! Nous vous contacterons pour confirmer.",
      appointmentInfo: appointmentData.data,
      emailSent: true,
      destination: "contact@climabat34.fr",
      timestamp: appointmentData.timestamp,
    })
  } catch (error: any) {
    console.error("[v0] Erreur lors du traitement du rendez-vous:", error)

    if (data) {
      const urgencyIcon = data.urgency === "emergency" ? "üö®" : data.urgency === "urgent" ? "‚ö°" : "üìÖ"
      const mailtoLink = `mailto:contact@climabat34.fr?subject=${encodeURIComponent(`${urgencyIcon} Rendez-vous - ${data.serviceType || "Service"}`)}&body=${encodeURIComponent(
        `Nom: ${data.firstName || "Non sp√©cifi√©"} ${data.lastName || ""}\n` +
          `Email: ${data.email || "Non sp√©cifi√©"}\n` +
          `T√©l√©phone: ${data.phone || "Non sp√©cifi√©"}\n` +
          `Adresse: ${data.address || "Non sp√©cifi√©e"}\n` +
          `Ville: ${data.city || "Non sp√©cifi√©e"}\n` +
          `Service: ${data.serviceType || "Non sp√©cifi√©"}\n` +
          `Urgence: ${data.urgency || "Normal"}\n` +
          `Date: ${data.preferredDate || "Non sp√©cifi√©e"}\n` +
          `Heure: ${data.preferredTime || "Non sp√©cifi√©e"}\n\n` +
          `Description:\n${data.description || "Aucune description"}`,
      )}`

      return NextResponse.json(
        {
          success: false,
          message: "‚ùå Erreur lors de l'envoi automatique. Votre client email va s'ouvrir.",
          error: error.message,
          mailtoLink,
        },
        { status: 500 },
      )
    } else {
      return NextResponse.json(
        {
          success: false,
          message: "‚ùå Erreur lors de l'envoi automatique. Donn√©es non disponibles.",
          error: error.message,
        },
        { status: 500 },
      )
    }
  }
}
